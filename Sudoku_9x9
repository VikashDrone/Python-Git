import random
from time import sleep
import numpy as np


def not_in_row(matrix, row, col):
    count = 0
    for x in matrix[row]:
        if matrix[row][col] == x:
            count = count + 1
    return count


def not_in_column(matrix, row, col):
    count = 0
    for x in range(9):
        if matrix[x][col] == matrix[row][col]:
            count = count + 1
    return count


def not_in_matrix(matrix, row, col):
    count = 0
    for x in range(((row // 3) * 3), ((row // 3) * 3) + 3):
        for y in range(((col // 3) * 3), ((col // 3) * 3) + 3):
            if matrix[x][y] == matrix[row][col]:
                count = count + 1
    return count


# assign the matrix
def assign_matrix(arr_tb):
    for a_i in range(9):
        arr_row = []
        for a_j in range(9):
            arr_row.append(random.randint(1, 9))
        arr_tb[a_i] = arr_row
    return arr_tb


def sum_matrix(matrix):
    sm = 0
    for i in range(9):
        for j in range(9):
            sm = sm + matrix[i][j]
    return sm


# validate matrix positions
def validate_matrix(arr_tb, i, j, depth):
    print("Depth :" + str(depth) + " i = " + str(i) + " j =" + str(j))
    print("-----------------------------")

    if sum_matrix(arr_tb) > 0:
        arr[i][j] = random.randint(1, 9)
        return (not_in_row(arr_tb, i, j) + not_in_column(arr_tb, i, j) + not_in_matrix(arr_tb, i, j)) // 4
    if i + j == 16:
        arr_tb[i][j] = random.randint(1, 9)
        return (not_in_row(arr_tb, i, j) + not_in_column(arr_tb, i, j) + not_in_matrix(arr_tb, i, j)) // 4

    while validate_matrix(arr_tb, (i + ((j + 1) // 9)), (j + 1).__mod__(9), depth + 1):
        print(arr_tb)
    arr_tb[i][j] = random.randint(1, 9)
    return (not_in_row(arr_tb, i, j) + not_in_column(arr_tb, i, j) + not_in_matrix(arr_tb, i, j)) // 4


# create matrix
arr = np.zeros((9, 9))
print(arr)

while validate_matrix(arr, 0, 0, 0):
    print("success")
print(arr)

'''
            if (not_in_row(arr_tb, i, j) + not_in_column(arr_tb, i, j) + not_in_matrix(arr_tb, i, j)) <= 3:
                validate_matrix(arr_tb, i, j + 1, depth + 1)
            else:
                j = j - 1
                arr_tb[i][j-1] = 0
                return arr_tb
'''
